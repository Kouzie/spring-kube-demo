plugins {
    id 'org.springframework.boot' apply false
    id 'io.spring.dependency-management' apply false
    id 'com.google.cloud.tools.jib' apply false
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.google.cloud.tools.jib'

    jar.enabled = false

    def url = project.properties["registryUrl"].toString()
    def username = project.properties["registryUsername"].toString()
    def password = project.properties["registryPassword"].toString()
    def tagsInput = project.properties['tags'].toString()
    if (tagsInput == null || tagsInput.trim().isEmpty()) {
        tagsInput = 'latest'
    }

    jib {
        from {
            image = 'docker.io/library/openjdk:17'
        }
        to {
            image = "${url}/${project.name}"
            tags = tagsInput.split(",").toList()
            setAllowInsecureRegistries(true) // docker registry 사설 인증서 허용
            auth.username = username
            auth.password = password
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2022.0.5"
            // 본 어플리케이션에서 해당 imports 가 있어야 opentelemetry 관련 클래스 찾기가 가능
            mavenBom "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:2.0.0-alpha"
        }
    }

    dependencies {
        implementation project(':common')
        implementation project(':monitoring')

        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation "io.opentelemetry:opentelemetry-api"
        implementation 'io.github.openfeign:feign-micrometer:12.3'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
    }

    task buildDockerImage(type: Exec) {
        print "project dir:${project.projectDir}"
        workingDir project.projectDir
        commandLine "docker", "build", "-t", project.name, "."
    }

    buildDockerImage.dependsOn build
}